{"version":3,"sources":["reportWebVitals.ts","components/Cars/CarService.ts","components/Cars/CarsForm.tsx","components/Utils/Formatter.ts","components/Cars/CarsList.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","API","getCars","a","axios","get","addCar","car","post","updateCar","put","_id","CarsForm","loadCars","initialState","description","maker","carModel","carId","km","onMaintenance","useState","setCar","handleInputChange","e","target","name","value","handleSubmit","preventDefault","CarService","toast","success","className","onSubmit","type","placeholder","onChange","autoFocus","dateFormatter","date","unformatted","Date","getDate","slice","getMonth","getFullYear","CarsList","carList","setCarList","res","data","setCarOnMaintenance","estimatedDate","setDate","useEffect","scope","map","onClick","ReactDOM","render","StrictMode","exact","path","component","document","getElementById"],"mappings":"sKAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,+DCNRQ,EAAM,wBAECC,EAAO,uCAAG,sBAAAC,EAAA,sEACRC,IAAMC,IAAN,UAAoBJ,EAApB,UADQ,mFAAH,qDAIPK,EAAM,uCAAG,WAAOC,GAAP,SAAAJ,EAAA,sEACPC,IAAMI,KAAN,UAAcP,EAAd,SAA0BM,GADnB,mFAAH,sDAINE,EAAS,uCAAG,WAAOF,GAAP,SAAAJ,EAAA,sEACVC,IAAMM,IAAN,UAAaT,EAAb,iBAAyBM,EAAII,KAAOJ,GAD1B,mFAAH,sD,+BC6FPK,EA/FE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACZC,EAAe,CACnBC,YAAa,GACbC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,GAAI,GACJC,eAAe,GAEjB,EAAsBC,mBAAcP,GAApC,mBAAOP,EAAP,KAAYe,EAAZ,KAEMC,EAAoB,SAACC,GACzBF,EAAO,2BAAKf,GAAN,kBAAYiB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAGvCC,EAAY,uCAAG,WAAOJ,GAAP,SAAArB,EAAA,6DACnBqB,EAAEK,iBADiB,SAEbC,EAAkBvB,GAFL,OAGnBM,IACAkB,IAAMC,QAAQ,iBACdV,EAAOR,GALY,2CAAH,sDAQlB,OACE,qBAAKmB,UAAW,YAAhB,SACE,sBAAMC,SAAUN,EAAcK,UAAW,SAAzC,SACE,uBAAOA,UAAW,QAAlB,SACE,gCACE,+BACE,6BACE,uBACEE,KAAM,OACNT,KAAM,QACNU,YAAa,YACbH,UAAW,eACXI,SAAUd,EACVe,WAAS,EACTX,MAAOpB,EAAIW,UAGf,6BACE,uBACEiB,KAAM,OACNT,KAAM,cACNU,YAAa,oBACbH,UAAW,eACXI,SAAUd,EACVe,WAAS,EACTX,MAAOpB,EAAIQ,gBAGf,6BACE,uBACEoB,KAAM,OACNT,KAAM,QACNU,YAAa,cACbH,UAAW,eACXI,SAAUd,EACVe,WAAS,EACTX,MAAOpB,EAAIS,UAGf,6BACE,uBACEmB,KAAM,OACNT,KAAM,WACNU,YAAa,kBACbH,UAAW,eACXI,SAAUd,EACVe,WAAS,EACTX,MAAOpB,EAAIU,aAGf,6BACE,uBACEkB,KAAM,OACNT,KAAM,KACNU,YAAa,eACbH,UAAW,eACXI,SAAUd,EACVe,WAAS,EACTX,MAAOpB,EAAIY,OAGf,6BACE,wBAAQc,UAAW,kBAAnB,mCChGHM,EAAgB,SAC3BC,GAEA,GAAKA,EAEE,CACL,IAAMC,EAAc,IAAIC,KAAKF,GAC7B,OACG,IAAMC,EAAYE,WAAWC,OAAO,GACrC,KACC,KAAOH,EAAYI,WAAa,IAAID,OAAO,GAC5C,IACAH,EAAYK,cARd,MAAO,OCqFIC,EAlFE,WACf,MAA8B1B,mBAAgB,IAA9C,mBAAO2B,EAAP,KAAgBC,EAAhB,KAEMpC,EAAQ,uCAAG,4BAAAV,EAAA,sEACG2B,IADH,OACToB,EADS,OAEfD,EAAWC,EAAIC,MAFA,2CAAH,qDAKRC,EAAmB,uCAAG,WAAO7C,GAAP,eAAAJ,EAAA,6DAC1BI,EAAIa,eAAgB,EACdoB,EAAO,IAAIE,KACjBnC,EAAI8C,cAAgBb,EAAKc,QAAQd,EAAKG,UAAY,IAHxB,SAIpBb,EAAqBvB,GAJD,uBAKpBM,IALoB,OAM1BkB,IAAMC,QAAQ,0BANY,2CAAH,sDAazB,OAJAuB,qBAAU,WACR1C,IAAWlB,SACV,IAGD,sBAAKsC,UAAW,YAAhB,UACE,wBAAOA,UAAW,QAAlB,UACE,gCACE,qBAAIA,UAAW,mCAAf,UACE,oBAAIuB,MAAO,MAAX,gBACA,oBAAIA,MAAO,MAAX,yBACA,oBAAIA,MAAO,MAAX,mBACA,oBAAIA,MAAO,MAAX,uBACA,oBAAIA,MAAO,MAAX,4BACA,oBAAIA,MAAO,MAAX,gBACA,oBAAIA,MAAO,MAAX,iCAGJ,gCACGR,EAAQS,KAAI,SAAClD,GACZ,OACE,qBAAI0B,UAAW,SAAf,UACE,oBAAIuB,MAAO,MAAOvB,UAAW,eAA7B,SACG1B,EAAIW,OAD2CX,EAAIW,OAGtD,oBAAIe,UAAW,eAAf,SAAgC1B,EAAIQ,cACpC,oBAAIkB,UAAW,eAAf,SAAgC1B,EAAIS,QACpC,oBAAIiB,UAAW,eAAf,SAAgC1B,EAAIU,WACpC,oBAAIgB,UAAW,eAAf,SACGM,EAAchC,EAAI8C,iBAErB,oBAAIpB,UAAW,eAAf,SAAgC1B,EAAIY,KACpC,oBACEc,UACE1B,EAAIa,cACA,iDACA,gDAJR,SAOGb,EAAIa,cAAgB,yCAAqB,4CAE5C,6BACGb,EAAIa,cACH,8BAAM,KAEN,wBACEa,UAAW,kBACXyB,QAAS,WACPN,EAAoB7C,GAAKZ,QAH7B,wCAxBwBY,EAAIW,eAuC1C,cAAC,EAAD,CAAUL,SAAUA,Q,YCzE1B8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,sBAAK5B,UAAU,YAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6B,OAAK,EAACC,KAAM,IAAKC,UAAWjB,IACnC,cAAC,IAAD,CAAOgB,KAAM,WAAYC,UAAWpD,OAEtC,cAAC,IAAD,WAINqD,SAASC,eAAe,SAG1B1E,M","file":"static/js/main.fb8c99ba.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\nimport { Car } from \"./Car\";\n\nconst API = \"http://localhost:4000\";\n\nexport const getCars = async () => {\n  return await axios.get<Car[]>(`${API}/cars`);\n};\n\nexport const addCar = async (car: Car) => {\n  return await axios.post(`${API}/cars`, car);\n};\n\nexport const updateCar = async (car: Car) => {\n  return await axios.put(`${API}/cars/${car._id}`, car);\n};\n","import React, { ChangeEvent, FormEvent, useState } from \"react\";\nimport { Car } from \"./Car\";\nimport * as CarService from \"./CarService\";\nimport { toast } from \"react-toastify\";\n\ntype InputChange = ChangeEvent<HTMLInputElement>;\n\ninterface Props {\n  loadCars: () => void;\n}\n\nconst CarsForm = ({ loadCars }: Props) => {\n  const initialState = {\n    description: \"\",\n    maker: \"\",\n    carModel: \"\",\n    carId: \"\",\n    km: \"\",\n    onMaintenance: false,\n  };\n  const [car, setCar] = useState<Car>(initialState);\n\n  const handleInputChange = (e: InputChange) => {\n    setCar({ ...car, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    await CarService.addCar(car);\n    loadCars();\n    toast.success(\"New car added\");\n    setCar(initialState);\n  };\n\n  return (\n    <div className={\"container\"}>\n      <form onSubmit={handleSubmit} className={\"border\"}>\n        <table className={\"table\"}>\n          <tbody>\n            <tr>\n              <td>\n                <input\n                  type={\"text\"}\n                  name={\"carId\"}\n                  placeholder={\"Add an ID\"}\n                  className={\"form-control\"}\n                  onChange={handleInputChange}\n                  autoFocus\n                  value={car.carId}\n                />\n              </td>\n              <td>\n                <input\n                  type={\"text\"}\n                  name={\"description\"}\n                  placeholder={\"Add a description\"}\n                  className={\"form-control\"}\n                  onChange={handleInputChange}\n                  autoFocus\n                  value={car.description}\n                />\n              </td>\n              <td>\n                <input\n                  type={\"text\"}\n                  name={\"maker\"}\n                  placeholder={\"Add a maker\"}\n                  className={\"form-control\"}\n                  onChange={handleInputChange}\n                  autoFocus\n                  value={car.maker}\n                />\n              </td>\n              <td>\n                <input\n                  type={\"text\"}\n                  name={\"carModel\"}\n                  placeholder={\"Add a car model\"}\n                  className={\"form-control\"}\n                  onChange={handleInputChange}\n                  autoFocus\n                  value={car.carModel}\n                />\n              </td>\n              <td>\n                <input\n                  type={\"text\"}\n                  name={\"km\"}\n                  placeholder={\"Add usage km\"}\n                  className={\"form-control\"}\n                  onChange={handleInputChange}\n                  autoFocus\n                  value={car.km}\n                />\n              </td>\n              <td>\n                <button className={\"btn btn-primary\"}>Add Car</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </form>\n    </div>\n  );\n};\n\nexport default CarsForm;\n","export const dateFormatter = (\n  date: string | number | null | undefined | Date\n) => {\n  if (!date) {\n    return \"N/A\";\n  } else {\n    const unformatted = new Date(date);\n    return (\n      (\"0\" + unformatted.getDate()).slice(-2) +\n      \"-\" +\n      (\"0\" + (unformatted.getMonth() + 1)).slice(-2) +\n      \"-\" +\n      unformatted.getFullYear()\n    );\n  }\n};\n\n/**\n * This function returns the percent representation from the decimal param\n * @param value\n */\nexport const percentageFormatter = (value: number) => {\n  return `${value * 100}%`;\n};\n\n/**\n * This function returns the currency value with separators and comas and also\n * the currency Symbol.\n * @param currency\n * @param value\n */\nexport const currencyFormatter = (\n  currency: string | undefined,\n  value: number | undefined\n) => {\n  //To register a new currency format, first insert the locale string into\n  // the localeStrings dict where the key is the currency and the value is\n  // the locale String\n  const localeStrings: any = {\n    MXN: \"es-MX\",\n  };\n\n  if (currency && value) {\n    return value.toLocaleString(localeStrings[currency], {\n      style: \"currency\",\n      currency: currency,\n    });\n  }\n  return \"N/A\";\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Car } from \"./Car\";\nimport * as CarService from \"./CarService\";\nimport CarsForm from \"./CarsForm\";\nimport { toast } from \"react-toastify\";\nimport { dateFormatter } from \"../Utils/Formatter\";\n\nconst CarsList = () => {\n  const [carList, setCarList] = useState<Car[]>([]);\n\n  const loadCars = async () => {\n    const res = await CarService.getCars();\n    setCarList(res.data);\n  };\n\n  const setCarOnMaintenance = async (car: Car) => {\n    car.onMaintenance = true;\n    const date = new Date();\n    car.estimatedDate = date.setDate(date.getDate() + 15);\n    await CarService.updateCar(car);\n    await loadCars();\n    toast.success(\"Car set to Maintenance\");\n  };\n\n  useEffect(() => {\n    loadCars().then();\n  }, []);\n\n  return (\n    <div className={\"container\"}>\n      <table className={\"table\"}>\n        <thead>\n          <tr className={\"p-3 mb-3 border-bottom cc_cursor\"}>\n            <th scope={\"col\"}>Id</th>\n            <th scope={\"col\"}>Description</th>\n            <th scope={\"col\"}>Maker</th>\n            <th scope={\"col\"}>Car model</th>\n            <th scope={\"col\"}>Estimated date</th>\n            <th scope={\"col\"}>KM</th>\n            <th scope={\"col\"}>On Maintenance</th>\n          </tr>\n        </thead>\n        <tbody>\n          {carList.map((car) => {\n            return (\n              <tr className={\"border\"} key={car.carId}>\n                <th scope={\"row\"} className={\"align-middle\"} key={car.carId}>\n                  {car.carId}\n                </th>\n                <td className={\"align-middle\"}>{car.description}</td>\n                <td className={\"align-middle\"}>{car.maker}</td>\n                <td className={\"align-middle\"}>{car.carModel}</td>\n                <td className={\"align-middle\"}>\n                  {dateFormatter(car.estimatedDate)}\n                </td>\n                <td className={\"align-middle\"}>{car.km}</td>\n                <td\n                  className={\n                    car.onMaintenance\n                      ? \"table-success text-center rounded align-middle\"\n                      : \"table-danger text-center rounded align-middle\"\n                  }\n                >\n                  {car.onMaintenance ? <span>True </span> : <span>False </span>}\n                </td>\n                <td>\n                  {car.onMaintenance ? (\n                    <div>{\"\"}</div>\n                  ) : (\n                    <button\n                      className={\"btn btn-primary\"}\n                      onClick={() => {\n                        setCarOnMaintenance(car).then();\n                      }}\n                    >\n                      Set car to maintenance\n                    </button>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <CarsForm loadCars={loadCars} />\n    </div>\n  );\n};\n\nexport default CarsList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CarsList from \"./components/Cars/CarsList\";\nimport CarsForm from \"./components/Cars/CarsForm\";\nimport \"bootswatch/dist/cyborg/bootstrap.min.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <div className=\"container\">\n        <Switch>\n          <Route exact path={\"/\"} component={CarsList} />\n          <Route path={\"/new-car\"} component={CarsForm} />\n        </Switch>\n        <ToastContainer />\n      </div>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}